except:
            dex[ligsym] { ( row['Sending cluster'] ,
                                        row['Ligand average expression value'] 
                                            )  
                                              } 
                                              
                                              
 except: 
            dex[ligsym] = { day : { ( row['Target cluster'] ,
                                     row['Receptor average expression value'] 
                                                 )  
                                              } }                                              
                                              
                                              
def filldicodex(dex, daydf, day):
    for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        recsym = row['Receptor symbol']
        try:
          dex[ligsym][day].add(
              ( row['Sending cluster'], 
               row['Ligand average expression value'] ) ) 
        except KeyError:
            dex[ligsym] = { day : { ( row['Sending cluster'] ,
                                                row['Ligand average expression value'] 
                                                )  
                                              } }
        try: 
            dex[recsym][day].add(
                (row['Target cluster'] ,
                 row['Receptor average expression value'] ) )
        except KeyError: 
            dex[ligsym] = { day : { ( row['Target cluster'] ,
                                                row['Receptor average expression value'] 
                                                 )  
                                              } }
    return dex
    
    
    
    
    
    def filldicodex(dex, daydf, day):
    for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        recsym = row['Receptor symbol']
        initdic = {'D0':set(), 'D2': set(), 'D4':set(), 'D7':set()}
        if ligsym not in dex.keys():
            dex[ligsym] = initdic
        if recsym not in dex.keys():
            dex[recsym] = initdic
        dex[ligsym][day].add(
                  ( row['Sending cluster'], 
                   row['Ligand average expression value'] ) )        
         
        dex[recsym][day].add(
                (row['Target cluster'] ,
                 row['Receptor average expression value'] ) )
    return dex


dex2 = {}    
for k in dex.keys():
    for j in dex[k]:
        print(max(dex[k][j], key=lambda item:item[1]))
        try:
            dex2[k][j] = max(dex[k][j], key=lambda item:item[1])
        except:
            dex2[k] = {j : max(dex[k][j], key=lambda item:item[1])}



def fillsenders(dex, daydf, day):
    for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        recsym = row['Receptor symbol']    
        initdic = {'ECs':[], 'FAPs':[],'M1':[],'M2':[], 'Neutro':[], 'sCs':[]}
        if ligsym not in dex.keys():
            dex[ligsym] = initdic
        if recsym not in dex.keys():
            dex[recsym] = initdic
        dex[ligsym][row['Sending cluster']].append(
                  (day,row['Ligand average expression value'])  )     
         
        dex[recsym][row['Target cluster']].append(
                 (day, row['Receptor average expression value'] ) )
    return dex

def fillreceivers(dex, daydf, day):
     for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        recsym = row['Receptor symbol']    
        initdic = {'ECs':[], 'FAPs':[],'M1':[],'M2':[], 'Neutro':[], 'sCs':[]}
        if ligsym not in dex.keys():
            dex[ligsym] = initdic
        if recsym not in dex.keys():
            dex[recsym] = initdic
        dex[ligsym][row['Sending cluster']].append(
                  (day,row['Ligand average expression value'])  )     
         
        dex[recsym][row['Target cluster']].append(
                 (day, row['Receptor average expression value'] ) )
    return dex


 dex[recsym][row['Target cluster']].append(
                 (day, row['Receptor average expression value'] ) )
                 
                 
def filldicoReceptors(dox, daydf, day): 
    dki = {'D0':0,'D2':1, 'D4':2, 'D7':3}       
    initdic = {'ECs':[], 'FAPs':[],'M1':[],'M2':[], 'Neutro':[], 'sCs':[]}
    for i, row in daydf.iterrows():
        sym = row['Receptor symbol']
        if sym not in dox.keys():
            dox[sym] = initdic
            dox[sym][row['Target cluster']] = [-0.1, -0.1, -0.1, -0.1]
            dox[sym][row['Target cluster']][dki[day]] = row['Receptor average expression value']
        else:
            if len(dox[sym][row['Target cluster']]) > 0:    
               current = dox[sym][row['Target cluster']][dki[day]]
               if row['Receptor average expression value'] > current:
                   print("      will replace : ")
                   print(dox[sym][row['Target cluster']][dki[day]]) 
                   print("      by")
                   print(row['Receptor average expression value'])
               else:
                   continue
    return dox
                 
                 

def filldicoSenders(dex, daydf, day): 
    """
    Parameters
    ----------
    dex : dictionary
    daydf : pandas L-R dataframe
    day : string (ex. 'D7')
        
    Returns
    -------
    dex : dicionary 
        {'Fgf9' : {'ECs': [72.79331566666666, -0.1, -0.1, -0.1], 'FAPs': [] ...
    EXPLANATION:
        The list of float elements is *expresion* : one value per day.

    """
    dki = {'D0':0,'D2':1, 'D4':2, 'D7':3}       
    initdic = {'ECs':[], 'FAPs':[],'M1':[],'M2':[], 'Neutro':[], 'sCs':[]}
    for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        #recsym = row['Receptor symbol']    
        if ligsym not in dex.keys():
            dex[ligsym] = initdic
            dex[ligsym][row['Sending cluster']] = [-0.1, -0.1, -0.1, -0.1]
            dex[ligsym][row['Sending cluster']][dki[day]] = row['Ligand average expression value']
        else:
            if len(dex[ligsym][row['Sending cluster']]) > 0:     
               print(dex[ligsym][row['Sending cluster']])
               if dex[ligsym][row['Sending cluster']][dki[day]] < row['Ligand average expression value'] :
                   dex[ligsym][row['Sending cluster']][dki[day]] = row['Ligand average expression value']
            else:
                continue
    return dex
    
    
    
    
    
    
     print(ex.head())
     for i, row in daydf.iterrows():
        ligsym = row['Ligand symbol']
        #recsym = row['Receptor symbol']    
        if ligsym not in dex.keys():
            dex[ligsym] = initdic
            dex[ligsym][row['Sending cluster']] = [-0.1, -0.1, -0.1, -0.1]
            dex[ligsym][row['Sending cluster']][dki[day]] = row['Ligand average expression value']
        else:
            if len(dex[ligsym][row['Sending cluster']]) > 0:     
               print(dex[ligsym][row['Sending cluster']])
               if dex[ligsym][row['Sending cluster']][dki[day]] < row['Ligand average expression value'] :
                   dex[ligsym][row['Sending cluster']][dki[day]] = row['Ligand average expression value']
            else:
                continue


"""
For both symbols calculate variance across days
pick the celltype for which the variance was more ouf??
"""   
tmpbyvariance = {} #
selection = {}
cumuvars = []
customstats = {}
for k in dex.keys():
tmpvar = [] # [('ECs', variance), ('sCs', variance) ,....]       
for cellty in dex[k].keys():
    # cellty can be a list 4 floats expression, or an empty one []
    if len(dex[k][cellty]) > 0:
        print(cellty)
        calcvar = np.var(dex[k][cellty])
        tmpvar.append((cellty, calcvar))
        cumuvars.append(calcvar) 
tmpbyvariance[k] = max(tmpvar, key=lambda x:x[1])    
print(tmpbyvariance) # {'Acvr1': ('FAPs', 4975.723058075971), 'Itgb1': ('FAPs', ...
autoCutoff = np.quantile(np.log10(cumuvars), q=0.05)
plt.hist(np.log10(cumuvars))
plt.axvline(x=autoCutoff, color='gray', linestyle='--')
for k in tmpbyvariance.keys():
if np.log10(tmpbyvariance[k][1]) >= autoCutoff:
    selection[k] = tmpbyvariance[k]
    print(selection[k][0])
    if selection[k][0] not in customstats.keys():
        customstats[selection[k][0]] = 1
    else:
        customstats[selection[k][0]] += 1
   
return selection, customstats
